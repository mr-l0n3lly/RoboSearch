{"version":3,"sources":["components/card/Card.jsx","components/card-list/CardList.jsx","components/search-box/SearchBox.jsx","App.js","reportWebVitals.js","index.js"],"names":["Card","props","className","alt","src","id","name","email","CardList","monsters","map","monster","SearchBox","placeholder","handleChange","type","onChange","App","e","setState","searchField","target","value","state","fetch","then","response","json","users","this","filteredMonsters","filter","toLowerCase","includes","Component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"2TAIaA,EAAO,SAACC,GACjB,OACI,sBAAKC,UAAU,iBAAf,UACI,qBAAKC,IAAI,UAAUC,IAAG,+BAA0BH,EAAMI,GAAhC,4BACtB,6BAAKJ,EAAMK,OACX,4BAAIL,EAAMM,YCJTC,G,MAAW,SAACP,GACrB,OACI,qBAAKC,UAAU,YAAf,SAEQD,EAAMQ,SAASC,KAAI,SAAAC,GAAO,OACtB,cAAC,EAAD,CAAMN,GAAIM,EAAQN,GAAIC,KAAMK,EAAQL,KAAMC,MAAOI,EAAQJ,eCPhEK,G,MAAY,SAAC,GAAmC,IAAjCC,EAAgC,EAAhCA,YAAaC,EAAmB,EAAnBA,aACrC,OACI,uBACIZ,UAAU,SACVa,KAAK,SACLF,YAAcA,EACdG,SAAUF,MCmCPG,G,wDAtCX,aAAe,IAAD,8BACV,gBAcJH,aAAe,SAACI,GACZ,EAAKC,SAAS,CAAEC,YAAaF,EAAEG,OAAOC,SAbtC,EAAKC,MAAQ,CACTd,SAAU,GACVW,YAAa,IALP,E,qDASd,WAAqB,IAAD,OAChBI,MAAM,8CACLC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GAAK,OAAI,EAAKT,SAAS,CAAEV,SAAUmB,S,oBAO7C,WAAU,IAAD,EAC6BC,KAAKN,MAA/Bd,EADH,EACGA,SAAUW,EADb,EACaA,YACZU,EAAmBrB,EAASsB,QAAO,SAACpB,GACtC,OAAOA,EAAQL,KAAK0B,cAAcC,SAASb,EAAYY,kBAG3D,OACI,sBAAK9B,UAAU,MAAf,UACI,iDACA,cAAC,EAAD,CACIW,YAAY,qBACZC,aAAee,KAAKf,eAExB,cAAC,EAAD,CAAUL,SAAWqB,W,GAjCnBI,cCOHC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBZ,MAAK,YAAkD,IAA/Ca,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.d5fca276.chunk.js","sourcesContent":["import React from 'react';\n\nimport './Card.css';\n\nexport const Card = (props) => {\n    return (\n        <div className=\"card-container\">\n            <img alt=\"monster\" src={`https://robohash.org/${props.id}?set=set2&size=180x180`}/>\n            <h2>{props.name}</h2>\n            <p>{props.email}</p>\n        </div>\n    );\n}","import React from 'react';\nimport {Card} from '../card/Card';\n\nimport './CardList.css';\n\nexport const CardList = (props) => {\n    return (\n        <div className=\"card-list\">\n            {\n                props.monsters.map(monster => (\n                    <Card id={monster.id} name={monster.name} email={monster.email}/>\n                ))\n            }\n        </div>\n    );\n}\n","import React from 'react';\nimport './SearchBox.css';\n\nexport const SearchBox = ({ placeholder, handleChange }) => {\n    return (\n        <input\n            className=\"search\"\n            type=\"search\"\n            placeholder={ placeholder }\n            onChange={handleChange}\n        />\n    );\n}","import React, { Component } from 'react';\nimport { CardList } from './components/card-list/CardList';\nimport { SearchBox } from './components/search-box/SearchBox';\nimport './App.css';\n\nclass App extends Component {\n    constructor() {\n        super();\n\n        this.state = {\n            monsters: [],\n            searchField: ''\n        };\n    }\n    \n    componentDidMount() {\n        fetch('https://jsonplaceholder.typicode.com/users')\n        .then(response => response.json())\n        .then(users => this.setState({ monsters: users}));\n    }\n\n    handleChange = (e) => {\n        this.setState({ searchField: e.target.value });\n    }\n\n    render() {\n        const { monsters, searchField } = this.state;\n        const filteredMonsters = monsters.filter((monster) => {\n            return monster.name.toLowerCase().includes(searchField.toLowerCase());\n        })\n\n        return (\n            <div className=\"App\">\n                <h1>Monster Rolodex</h1>\n                <SearchBox\n                    placeholder=\"Search monsters...\"\n                    handleChange={ this.handleChange }\n                />\n                <CardList monsters={ filteredMonsters } />\n            </div>\n        );\n    }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}